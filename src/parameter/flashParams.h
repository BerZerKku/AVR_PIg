/*
 * flashParams.h
 *
 *  Created on: 27.03.2015
 *      Author: Shcheblykin
 */

#ifndef FLASHPARAMS_H_
#define FLASHPARAMS_H_

#include <avr/pgmspace.h>
#include "glbDefine.h"
#include "param.h"

static const char fcNullBuf[] PROGMEM= "";

/// массив строк размерностей, связан с Param::DIMENSION
static const char fcDimension[] [5] PROGMEM = {
		"",		// Param::DIM_NO
		"мА",	// Param::DIM_MA
		"А",	// Param::DIM_A
		"кА",	// Param::DIM_KA
		"В",	// Param::DIM_V
		"кВ",	// Param::DIM_KV
		"мс",	// Param::MSEC
		"c",	// Param::DIM_SEC
		"час",	// Param::DIM_HOUR
		"дБ",	// Param::DIM_DB
		"Гц",	// Param::DIM_HZ
		"кГц",	// Param::DIM_KHZ
		"град"	// Param::DIM_DEG
};

/// Возможные значения параметра.
static const char fcOnOff[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"выкл.",		///< 0
		"вкл."			///< 1
};

/// Интерфейс связи (параметр Интерфейс).
static char fcInterface[TInterface::MAX][STRING_LENGHT] PROGMEM = {
//	 	 1234567890
		"USB",			///< TInterface::USB
		"RS485"			///< TInterface::RS485
};

// Протокол (параметр Интерфейс).
static char fcProtocol[TProtocol::MAX ][STRING_LENGHT] PROGMEM = {
//	 	 1234567890
		"СТАНДАРТ",		///< TProtocol::STANDART
		"MODBUS",		///< TProtocol::MODBUS
		"МЭК-101"		///< TProtocol::IEC_101
};

// Скорость, бит/с (параметр Интерфейс).
static char fcBaudRate[TBaudRate::MAX][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"600",			///< TBaudRate::_600
		"1200",			///< TBaudRate::_1200
		"2400",			///< TBaudRate::_2400
		"4800",			///< TBaudRate::_4800
		"9600",			///< TBaudRate::_9600
		"19200"			///< TBaudRate::_19200
};

/// Количество бит данных (параметр Интерфейс).
static char fcDataBits[TDataBits::MAX][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"8"				///< TDataBits::_8
};

/// Четность (параметр Интерфейс).
static char fcParity[TParity::MAX][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"нет",			///< TParity::NONE
		"чет",			///< TParity::EVEN
		"нечет"			///< TParity::ODD
};

/// Стоповые биты (параметр Интерфейс).
static char fcStopBits[TStopBits::MAX][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"1",			///< TStopBits::ONE
		"2"				///< TStopBits::TWO
};

/// Номер подстанции.
static char fcSubstNum[][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"1",
		"2"
};

/// Тип защиты.
static char fcRpsType[][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"ДФЗ",			///<
		"НЗ"			///<
};

/// Отключение фазы.
static char fcPhaseOff[][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"По фазное",	///<
		"Одноврем."		///<
};

/// Условие пуска.
static char fcPuskTrig[] [STRING_LENGHT] PROGMEM = {
//		 1234567890
		"По уровню",	///<
		"По фронту"		///<
};

// параметр заглушка
static const Param fNullParam PROGMEM = {
		"",						// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_NO,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_NO,			// тип команды для сохранения новго значения
		GB_SEND_RD_NO,			// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// частота
static const Param fFreq PROGMEM = {
		"Частота",				// название параметра
		GB_COM_GET_FREQ,		// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT_NO_DIM,// диапазон измнения
		Param::DIM_KHZ,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		16,						// минимальное значение
		1000,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_INT16_BE,	// тип команды для сохранения новго значения
		GB_SEND_RD_NO_DATA,		// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Конфигурация терминала
static const Param fSubstNum PROGMEM = {
		"Номер подстанции",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcSubstNum[0],			// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		SIZE_OF(fcSubstNum),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		1,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Тип защиты
static const Param fRpsType PROGMEM = {
		"Тип защиты",			// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcRpsType[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcRpsType),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		1,						// байт дополнительной информации для сохранения
		2,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Включение блокировки
static const Param fBlockOn PROGMEM = {
		"Включение блокировки",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		1,						// байт дополнительной информации для сохранения
		3,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Отключение фаз A, B и С
static const Param fPhaseOff PROGMEM = {
		"Отключение фаз",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPhaseOff[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcPhaseOff),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		1,						// байт дополнительной информации для сохранения
		4,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Пуск от напряжения ОП
static const Param fPuskOp PROGMEM = {
		"Пуск от напряж. ОП",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		2,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Пуск от напряжения ОП условие
static const Param fPuskOpTrig PROGMEM = {
		"Условие пуска от ОП",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPuskTrig[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcPuskTrig),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		2,						// байт дополнительной информации для сохранения
		1,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Пуск от напряжения ОП
static const Param fPuskNp PROGMEM = {
		"Пуск от напряж. НП",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		2,						// байт дополнительной информации для сохранения
		2,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Пуск от напряжения ОП условие
static const Param fPuskNpTrig PROGMEM = {
		"Условие пуска от НП",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPuskTrig[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcPuskTrig),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		2,						// байт дополнительной информации для сохранения
		3,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Поиск поврежденной фазы по скачку фазового угла
static const Param fFindPhAngle PROGMEM = {
		"По скачку фаз. угла",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		3,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Поиск поврежденной фазы по значению Imax
static const Param fFindPhIMax PROGMEM = {
		"По значению Imax",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		3,						// байт дополнительной информации для сохранения
		1,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Поиск поврежденной фазы по значению Iотн
static const Param fFindPhIOth PROGMEM = {
		"По значению Iотн",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		3,						// байт дополнительной информации для сохранения
		2,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Поиск поврежденной фазы по скачку Z
static const Param fFindPhZ PROGMEM = {
		"По скачку Z",			// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		3,						// байт дополнительной информации для сохранения
		3,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Поиск поврежденной фазы по отношению R/X
static const Param fFindPhRX PROGMEM = {
		"По отношению R/X",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_BITE,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		SIZE_OF(fcOnOff),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_BITE,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		3,						// байт дополнительной информации для сохранения
		4,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Порог пуска
static const Param fPuskThd PROGMEM = {
		"Порог пуска",			// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		180,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		4,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Порог КЗ при ДФЗ
static const Param fShortThdDfz PROGMEM = {
		"Порог КЗ при ДФЗ",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		180,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		5,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Порог КЗ при НЗ
static const Param fShortThdNz PROGMEM = {
		"Порог КЗ при НЗ",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		180,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		6,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Скачок фазового угла
static const Param fPhaseEdge PROGMEM = {
		"Скачок фазового угла",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		180,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		7,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Значение I max
static const Param fIMax PROGMEM = {
		"I max",				// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_KA,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		25,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		8,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Величине I отн
// TODO
static const Param fIOth PROGMEM = {
		"I отн",				// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		10,						// минимальное значение
		40,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		9,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Скачок Z/Zнорм
// TODO
static const Param fZEdge PROGMEM = {
		"Скачок Z/Zнорм",		// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		99,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		10,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Компенсация задержки
// TODO
static const Param fDelay PROGMEM = {
		"Компенсация задержки",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		-100,					// минимальное значение
		100,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		11,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Минимальный ток фазы
// TODO
static const Param fIFazMin PROGMEM = {
		"Минимальный ток фазы",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_KA,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		20,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		12,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Напряжение фазы при обрыве
// TODO
static const Param fUFazMin PROGMEM = {
		"U фазы при обрыве",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_KV,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		20,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		13,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Минимально допустимое напряжение фазы
static const Param fUFazDop PROGMEM = {
		"Мин. напряжение фазы",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_KV,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		500,					// максимальное значение
		2,						// дискретность
		2,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		14,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// Длительность отключения
static const Param fTimeOnOff PROGMEM = {
		"Длительность отключ.",	// название параметра
		GB_COM_GET_RPS_PARAMS,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_MSEC,		// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		255,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_DOP_INT8,	// тип команды для сохранения новго значения
		GB_SEND_RD_DOP,			// тип команды для чтения значения
		15,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
};

// интерфейс связи
static const Param fIntfInterface PROGMEM = {
		"Интерфейс связи",		// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcInterface[0],			// массив значений
		1,						// кол-во повторений параметра
		TInterface::MIN,		// минимальное значение
		SIZE_OF(fcInterface),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_NO,			// тип команды для сохранения новго значения
		GB_SEND_RD_NO,			// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_NO 	// условие для изменения параметра
};

// четность - интерфейс связи
static const Param fIntfProtocol PROGMEM = {
		"Протокол",				// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcProtocol[0],			// массив значений
		1,						// кол-во повторений параметра
		TProtocol::MIN,			// минимальное значение
		SIZE_OF(fcProtocol),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_NO,			// тип команды для сохранения новго значения
		GB_SEND_RD_NO,			// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_NO 	// условие для изменения параметра
};

// скорость связи - интерфейс связи
static const Param fIntfBaudrate PROGMEM = {
		"Скорость передачи",	// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcBaudRate[0],			// массив значений
		1,						// кол-во повторений параметра
		TBaudRate::MIN,			// минимальное значение
		SIZE_OF(fcBaudRate),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_NO,			// тип команды для сохранения новго значения
		GB_SEND_RD_NO,			// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_NO 	// условие для изменения параметра
};

// количество битов данных - интерфейс связи
static const Param fIntfDataBits PROGMEM = {
		"Биты данных",			// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcDataBits[0],			// массив значений
		1,						// кол-во повторений параметра
		TDataBits::MIN,			// минимальное значение
		SIZE_OF(fcDataBits),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_NO,			// тип команды для сохранения новго значения
		GB_SEND_RD_NO,			// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_NO 	// условие для изменения параметра
};

// четность - интерфейс связи
static const Param fIntfParity PROGMEM = {
		"Четность",				// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcParity[0],			// массив значений
		1,						// кол-во повторений параметра
		TParity::MIN,			// минимальное значение
		SIZE_OF(fcParity),		// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_NO,			// тип команды для сохранения новго значения
		GB_SEND_RD_NO,			// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_NO 	// условие для изменения параметра
};

// число стоповых битов - интерфейс связи
static const Param fIntfStopBits PROGMEM = {
		"Стоповые биты",		// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcStopBits[0],			// массив значений
		1,						// кол-во повторений параметра
		TStopBits::MIN,			// минимальное значение
		SIZE_OF(fcStopBits),	// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_NO,			// тип команды для сохранения новго значения
		GB_SEND_RD_NO,			// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_NO 	// условие для изменения параметра
};

// адрес в локальной сети
static const Param fNetAddress PROGMEM = {
		"Сетевой адрес",		// название параметра
		GB_COM_NO,				// команда стандартного протокола	// TODO
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		247,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_WR_INT8,		// тип команды для сохранения новго значения
		GB_SEND_RD_NO_DATA,		// тип команды для чтения значения
		0,						// байт дополнительной информации для сохранения
		0,						// позиция бит (первого бита)
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO,	// зависимость повторений
		Param::CHANGE_COND_REG_DISABLE // условие для изменения параметра
};

// Массив параметров (связан с eGB_PARAM)
static const Param* fParams[] PROGMEM  = {
		&fNullParam,
		&fFreq,
		// конфигурация терминала
		&fSubstNum,
		&fRpsType,
		&fBlockOn,
		&fPhaseOff,
		// выбор источника Пуска
		&fPuskOp,
		&fPuskOpTrig,
		&fPuskNp,
		&fPuskNpTrig,
		// поиск поврежденной фазы
		&fFindPhAngle,
		&fFindPhIMax,
		&fFindPhIOth,
		&fFindPhZ,
		&fFindPhRX,
		// вводимые параметры
		&fPuskThd,
		&fShortThdDfz,
		&fShortThdNz,
		&fPhaseEdge,
		&fIMax,
		&fIOth,
		&fZEdge,
		&fDelay,
		&fIFazMin,
		&fUFazMin,
		&fUFazDop,
		&fTimeOnOff,
		// Параметры интерфейса
		&fIntfInterface,
		&fIntfProtocol,
		&fIntfBaudrate,
		&fIntfDataBits,
		&fIntfParity,
		&fIntfStopBits,
		&fNetAddress
};

#endif /* FLASHPARAMS_H_ */
