/*
 * protocolPcI.h
 *
 *  Created on: 14.05.2015
 *      Author: Shcheblykin
 */

#ifndef PROTOCOLPCI_H_
#define PROTOCOLPCI_H_

#include "CIec101.h"
#include "glbDefine.h"
#include "paramBsp.h"
#include "debug.h"

class TProtocolPcI : public CIec101{
public:
	TProtocolPcI(stGBparam *sParam, uint8_t *buf, uint8_t size);

public:
	/**	Функция отправки сообщения.
	 *
	 * 	@return Кол-во байт данных для передачи.
	 */
	uint8_t send();

	/**	Проверка наличия данных класса 1(2) на передачу.
	 *
	 *	- Проверяется наличие данных для передачи.
	 *	- Проверяются счетчики журналов и при необходимости формируется запрос
	 *	в БСП.
	 *
	 * 	@retval False Нет данных на передачу.
	 * 	@retval True Есть данные на передачу.
	 */
	virtual bool checkEvent();

private:
	stGBparam * const sParam_;	///< Структура параметров

	/// Элементы информации
	typedef enum __attribute__ ((__packed__)) {
		IE_MIN				= 200,	///< Минимальный используемый адрес - 1.
		// ^^^ Всегда в начале.
		// Флаги аппарата
		IE_ERROR			= 201,	///< Флаг наличия неисправности в аппарате.
		IE_WARNING 			= 202,	///< Флаг наличия предупреждения в аппарате.
		IE_PRD_COM			= 203,	///< Флаг наличия переданной команды.
		IE_PRM_COM			= 204,	///< Флаг наличия принятой команды.
		// Флаги общих неисправностей и предупреждений
		IE_GLB_ERROR_START 	= 301,	///< Начальный адрес общих неисправностей.
		IE_GLB_ERROR_END	= 316,	///< Конечный адрес общих неисправностей.
		IE_GLB_WARNING_START= 317,	///< Начальный адрес общих предупреждений.
		IE_GLB_WARNING_END	= 332,	///< Конечный адрес общих предупреждений.
		// Флаги передатчика
		IE_PRD_ON			= 400,	///< Флаг наличия передатчика в аппарате.
		IE_PRD_ERROR_START	= 401,	///< Начальный адрес неисправностей передатчика.
		IE_PRD_ERROR_END	= 416,	///< Конечный адрес неисправностей передатчика.
		IE_PRD_WARNING_START= 417,	///< Начальный адрес предупреждений передатчика.
		IE_PRD_WARNING_END	= 432,	///< Конечный адрес предупреждений передатчика.
		IE_PRD_COM_START	= 450,	///< Начальный адрес команд передатчика.
		IE_PRD_COM_END		= 481,	///< Конечный адрес команд передатчика.
		// Флаги приемника
		IE_PRM_ON			= 500,	///< Флаг наличия приемника в аппарате.
		IE_PRM_ERROR_START	= 501,	///< Начальный адрес неисправностей приемника.
		IE_PRM_ERROR_END	= 516,	///< Конечный адрес неисправностей приемника.
		IE_PRM_WARNING_START= 517,	///< Начальный адрес предупреждений приемника.
		IE_PRM_WARNING_END	= 532,	///< Конечный адрес предупреждений приемника.
		IE_PRM_COM_START	= 550,	///< Начальный адрес команд приемника.
		IE_PRM_COM_END		= 581,	///< Конечный адрес команд приемника.
		// Флаги защиты
		IE_DEF_ON			= 600,	///< Флаг наличия защиты в аппарате.
		IE_DEF_ERROR_START	= 601,	///< Начальный адрес неисправностей защиты.
		IE_DEF_ERROR_END	= 616,	///< Конечный адрес неисправностей защиты.
		IE_DEF_WARNING_START= 617,	///< Начальный адрес предупреждений защиты.
		IE_DEF_WARNING_END	= 632,	///< Конечный адрес предупреждений защиты.
		// TODO добавить сигналы защиты
//		IE_DEF_PUSK			= 650,	///< Сигнал Пуск.
//		IE_DEF_STOP			= 652,	///< Сигнал Стоп.
//		IE_DEF_MAN			= 654,	///< Сигнал Манипуляция.
//		IE_DEF_PRD			= 656,	///< Сигнал Прд.
//		IE_DEF_PRM			= 658,	///< Сигнал Прм.
//		IE_DRF_OUT			= 670,	///< Сигнал Рз-выход.
		// vvv Всегда в конце.
		IE_MAX						///< Максимальный используемый адрес + 1.

	} EInfoElement;

	/**	Обработка ответа на команду опроса.
	 *
	 *	При корректном адресе подготавливается кадр C_IC_NA_1 и возвращается \a
	 *	True, иначе False.
	 *
	 *	@param adr[out] Адрес флага.
	 *	@param val[out] Значение флага.
	 *	@retval True Подготовлены данные для передачи.
	 *	@retval False Данных нет.
	 */
	virtual bool procInterrog(uint16_t &adr, bool &val);

	/**	Установка времени.
	 *
	 *	Вызывается автоматически, при получении кадра синхронизации времени.
	 *
	 *	Подгатавливается команда для передачи времени в БСП.
	 *
	 * 	@retval True Время установлено.
	 * 	@retval False Время не установлено.
	 */
	virtual bool procSetTime();

	/**	Установка времени, сообщение об окочнании.
	 *
	 * 	Вызывается автоматически при принятии пакетов фиксированой длины, просле
	 * 	кадра синхронизации времени.
	 *
	 * 	Если до этого было получен кадр синхронизации времени, будет сформирован
	 * 	кадр сообщения об окончании.
	 *
	 * 	@retval True Если был получен ответ от БСП с временем во время синхронизации.
	 * 	@retval False Если ответа небыло.
	 */
	virtual bool procSetTimeEnd();

	/**	Возвращает флаги общие для аппарата.
	 *
	 * 	@param[in] adr Адрес флага.
	 *	@retval True Флаг установлен.
	 *	@retval False Флаг сброшен.
	 */
	bool getDevice(uint16_t adr) const;

	/**	Возвращает флаги общего состояния.
	 *
	 * 	@param[in] adr Адрес флага.
	 *	@retval True Флаг установлен.
	 *	@retval False Флаг сброшен.
	 */
	bool getGlb(uint16_t adr) const;

	/**	Возвращает флаги передатчика.
	 *
	 * 	@param[in] adr Адрес флага.
	 *	@retval True Флаг установлен.
	 *	@retval False Флаг сброшен.
	 */
	bool getPrd(uint16_t adr) const;

	/**	Возвращает флаги приемника.
	 *
	 * 	@param[in] adr Адрес флага.
	 *	@retval True Флаг установлен.
	 *	@retval False Флаг сброшен.
	 */
	bool getPrm(uint16_t adr) const;

	/**	Возвращает флаги защиты.
	 *
	 * 	@param[in] adr Адрес флага.
	 *	@retval True Флаг установлен.
	 *	@retval False Флаг сброшен.
	 */
	bool getDef(uint16_t adr) const;
};

#endif /* PROTOCOLPCI_H_ */
