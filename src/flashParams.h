/*
 * flashParams.h
 *
 *  Created on: 27.03.2015
 *      Author: Shcheblykin
 */

#ifndef FLASHPARAMS_H_
#define FLASHPARAMS_H_

#include <avr/pgmspace.h>
#include "glbDefine.h"
#include "param.h"

static const char fcNullBuf[] PROGMEM= "";

/// массив строк размерностей, связан с Param::DIMENSION
static const char fcDimension[] [5] PROGMEM = {
		"",		// Param::DIM_NO
		"мА",	// Param::DIM_MA
		"А",	// Param::DIM_A
		"кА",	// Param::DIM_KA
		"В",	// Param::DIM_V
		"кВ",	// Param::DIM_KV
		"мс",	// Param::MSEC
		"c",	// Param::DIM_SEC
		"час",	// Param::DIM_HOUR
		"дБ",	// Param::DIM_DB
		"Гц",	// Param::DIM_HZ
		"кГц",	// Param::DIM_KHZ
		"град"	// Param::DIM_DEG
};

/// Возможные значения параметра.
static const char fcOnOff[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"выкл.",		///<
		"вкл."			///<
};

/// Тип защиты (параметр Защиты).
static const char fcDefType[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"ДФЗ-ПрПд",		///<
		"ДФЗ-МК1",		///<
		"ДФЗ-МК2",		///<
		"ДФЗ-L60",		///<
		"НЗ-ПрПд",		///<
		"НЗ-МК",		///<
		"ППЗ-ПрПд",		///<
		"ППЗ-МК"		///<
};

/// Тип линии (параметр Общий).
static const char fcNumDevices[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"2 концевая",	///<
		"3 концевая"	///<
};

/// Тип детектора (параметр Общий).
static const char fcPrmType[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"акт+пасс",		///<
		"активный",		///<
		"пассивный"	///<
};

/// Тип совместимости (параметр Защиты).
static const char fcCompatibility[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"АВАНТ Р400",	///<
		"ПВЗ-90",		///<
		"АВЗК-80",		///<
		"ПВЗУ-Е",		///<
		"ПВЗЛ",			///<
		"ЛИНИЯ-Р"		///<
};

/// Тип совместимости (параметр К400).
static const char fcCompK400[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"АВАНТ",		///<
		"АВАНТ ПРД",	///<
		"АВАНТ ПРМ",	///<
		"АКПА ПРД",		///<
		"АКПА ПРМ",		///<
		"КЕДР ПРД",		///<
		"КЕДР ПРМ",		///<
		"УПК-Ц ПРД",	///<
		"УПК-Ц ПРМ",	///<
		"ВЧТО ПРД",		///<
		"ВЧТО ПРМ"		///<
};

/// Количество команд.
static const char fcK400NumCom[][STRING_LENGHT] PROGMEM = {
// 		 1234567890
		"0",			///<
		"4",			///<
		"8",			///<
		"12",			///<
		"16",			///<
		"24",			///<
		"32"			///<
};

/// Частота ПРД / ПРМ (параметр Защиты).
static const char fcPvzlFreq[][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"-1000Гц",		///<
		"-500Гц",		///<
		"0Гц",			///<
		"+500Гц",		///<
		"+1000Гц"		///<
};

/// Протокол обмена (параметр Общий).
static
const char fcPvzueProtocol[][STRING_LENGHT] PROGMEM = {
//		 1234567890
		"быстрый",		///<
		"медленный"	///<
};

/// Тип атоконтроля (параметр Общий).
static char fcPvzueTypeAC[][STRING_LENGHT] PROGMEM = {
//	 	 1234567890
		"тревожный",	///<
		"нормальный",	///<
		"спокойный"		///<
};

/// Признак четности (параметр Общий).
static char fcPvzueParity[][STRING_LENGHT] PROGMEM = {
//	 	 1234567890
		"вкл.",			///<
		"выкл."			///<
};

// параметр заглушка
static const Param fNullParam = {
		"",						// название параметра
		GB_COM_NO,				// команда стандартного протокола
		Param::PARAM_NO,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_NO,				// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// синхронизация часов
static const Param fTimeSynch PROGMEM = {
		"Синхронизация часов",	// название параметра
		GB_COM_GET_TIME_SINCHR,	// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// номер аппарата
// TODO максимум зависит от количества аппаратов в линии
static const Param fNumOfDevice PROGMEM = {
		"Номер аппарата",		// название параметра
		GB_COM_GET_DEVICE_NUM,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		3,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_ON_NUM_DEVS,	// тип параметра для сохранения новго значения
		Param::DEPEND_SAME_NO	// байт дополнительной информации для сохранения
};

// контроль выходного сигнала
static const Param fOutCheck PROGMEM = {
		"Контроль вых.сигнала",	// название параметра
		GB_COM_GET_OUT_CHECK,	// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// порог предупреждения
static const Param fWarnThd PROGMEM = {
		"Порог предупреждения",	// название параметра
		GB_COM_GET_CF_THRESHOLD,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DB,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		22,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// порог предупреждения по КЧ (для РЗСК)
static const Param fWarnThdCf PROGMEM = {
		"Порог предупр. по КЧ",	// название параметра
		GB_COM_GET_CF_THRESHOLD,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DB,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		22,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// время перезапуска
static const Param fTimeRerun PROGMEM = {
		"Время перезапуска",	// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_SEC,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		5,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// удержание реле команд ПРД
static const Param fComPrdKeep PROGMEM = {
		"Удерж. реле ком. ПРД",	// название параметра
		GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// удержание реле команд ПРМ
static const Param fComPrmKeep PROGMEM = {
		"Удерж. реле ком. ПРМ",	// название параметра
		GB_COM_GET_COM_PRM_KEEP,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// загрубление чувствительности ПРМ
// в К400 3-х концевой второй параметр работает только для 3-его аппарата
// TODO повторения зависят от количества аппаратов в линии
// TODO байт дополнительной информации зависит от количества аппаратов в линии
static const Param fInDec PROGMEM = {
		"Загрубл. чувств. ПРМ",	// название параметра
		GB_COM_GET_CF_THRESHOLD,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DB,			// размерность
		fcNullBuf,				// массив значений
		2,						// кол-во повторений параметра
		0,						// минимальное значение
		22,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_NUM_DEVS	// зависимость повторений
};

// адрес в локальной сети
static const Param fNetAddress PROGMEM = {
		"Сетевой адрес",		// название параметра
		GB_COM_GET_NET_ADR,		// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		247,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// номинальноые выходное напряжение
static const Param fUOutNom PROGMEM = {
		"Uвых номинальное",		// название параметра
		GB_COM_GET_COM_PRM_KEEP,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_V,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		18,						// минимальное значение
		50,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// частота
static const Param fFreq PROGMEM = {
		"Частота",				// название параметра
		GB_COM_GET_FREQ,		// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT_NO_DIM,// диапазон измнения
		Param::DIM_KHZ,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		16,						// минимальное значение
		1000,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT16_BE,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// совместимость (Р400, Р400м)
static const Param fCompP400 PROGMEM = {
		"Совместимость",		// название параметра
		GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcCompatibility[0],		// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		5,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// снижение ответа АК (ПВЗЛ)
static const Param fInDecAcAnswer PROGMEM = {
		"Снижение ответа АК",	// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DB,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		20,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// тип детектора
static const Param fDetector PROGMEM = {
		"Тип детектора",		// название параметра
		GB_COM_GET_TIME_SINCHR,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		3,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		2,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// коррекция напряжения
static const Param fCorU PROGMEM = {
		 "Коррекция напряжения",// название параметра
		GB_COM_GET_COR_U_I,		// команда стандартного протокола
		Param::PARAM_U_COR,			// тип параметра
		Param::RANGE_U_COR,		// диапазон измнения
		Param::DIM_V,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		-600,					// минимальное значение
		600,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_COR_U,			// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// коррекция тока
static const Param fCorI PROGMEM = {
		"Коррекция тока",		// название параметра
		GB_COM_GET_COR_U_I,		// команда стандартного протокола
		Param::PARAM_I_COR,		// тип параметра
		Param::RANGE_I_COR,		// диапазон измнения
		Param::DIM_MA,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		-999,					// минимальное значение
		999,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_COR_I,			// тип параметра для сохранения новго значения
		2,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// протокол обмена (ПВЗУ-Е)
static const Param fPvzueProtocol PROGMEM =	{
		"Протокол обмена",		// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPvzueProtocol[0],		// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		2,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// признак четности (ПВЗУ-Е)
static const Param fPvzueParity PROGMEM = {
		"Признак четности",		// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPvzueParity[0],		// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		2,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		2,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// допустимые провалы (ПВЗУ-Е)
static const Param fPvzueFail PROGMEM = {
		"Допустимые провалы",	// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		80,						// максимальное значение
		2,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		3,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// порог по помехе (ПВЗУ-Е)
static const Param fPvzueNoiseThd PROGMEM = {
		"Порог по помехе",		// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_SEC,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		255,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		4,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// допустимая помеха (ПВЗУ-Е)
static const Param fPvzueNoiseLvl PROGMEM = {
		"Допустимая помеха",	// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		20,						// минимальное значение
		80,						// максимальное значение
		20,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		5,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// тип автоконтроля (ПВЗУ-Е)
static const Param fPvzueAcType PROGMEM = {
		"Тип автоконтроля",		// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPvzueTypeAC[0],		// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		3,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		6,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// период беглого режима АК (ПВЗУ-Е)
static const Param fPvzueAcPeriod PROGMEM = {
		 "Период беглого АК",	// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_SEC,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		255,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		7,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};


//	период повтора беглого режима АК (ПЗВУ-Е)
static const Param fPvzueAcPerRe PROGMEM = {
		"Период повт.бегл. АК",	// название параметра
		GB_COM_GET_TIME_RERUN,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_SEC,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		255,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		8,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// резервирование
static const Param fBackup PROGMEM = {
		"Резервирование",		// название параметра
		GB_COM_GET_COR_U_I,		// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// совместимость К400
static const Param fCompK400 PROGMEM = {
		"Совместимость",		// название параметра
		GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcCompK400[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		10,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		2,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// тип линии (кол-во аппаратов в линии)
static const Param fNumOfDevices PROGMEM = {
		"Тип линии",			// название параметра
		GB_COM_DEF_GET_LINE_TYPE,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNumDevices[0],		// массив значений
		1,						// кол-во повторений параметра
		1,						// минимальное значение
		2,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};


// телемеханика
static const Param fTmK400 PROGMEM = {
		"Телемеханика",			// название параметра
		GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		3,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};


// тип защиты
static const Param fDefType	PROGMEM = {
		"Тип защиты", 			// название параметра
		GB_COM_DEF_GET_DEF_TYPE,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcDefType[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		7,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// дополнительное время без манипуляции
static const Param fTimeNoMan PROGMEM = {
		"Доп. время без ман.",	// название параметра
		GB_COM_DEF_GET_T_NO_MAN,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_HOUR,		// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		99,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// перекрытие импульсов
static const Param fOverlap PROGMEM = {
		"Перекрытие импульсов",	// название параметра
		GB_COM_DEF_GET_OVERLAP,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		54,						// максимальное значение
		2,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// перекрытие импульсов Р400
static const Param fOverlapP400 PROGMEM = {
		"Перекрытие импульсов",	// название параметра
		GB_COM_DEF_GET_OVERLAP,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		18,						// минимальное значение
		54,						// максимальное значение
		2,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// компенсация задержки в линии
// TODO повторения зависят от количества аппаратов в линии
// TODO байт дополнительной информации зависит от количества аппаратов в линии
static const Param fDelay PROGMEM = {
		"Компенсация задержки",	// название параметра
		GB_COM_DEF_GET_DELAY,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		2,						// кол-во повторений параметра
		0,						// минимальное значение
		18,						// максимальное значение
		2,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_NUM_DEVS	// зависимость повторений
};

// порог предупреждения по РЗ
static const Param fWarnThdRz PROGMEM = {
		"Порог предупр. по РЗ",	// название параметра
		GB_COM_DEF_GET_RZ_THRESH,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DB,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		16,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// загрубление чувствительности
static const Param fSensDec PROGMEM = {
		"Загрубление чувствит",	// название параметра
		GB_COM_DEF_GET_RZ_DEC,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DB,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		32,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// загрубление чувствительности РЗ
// TODO повторения зависят от количества аппаратов в линии
// TODO байт дополнительной информации зависит от количества аппаратов в линии
static const Param fSensDecRz PROGMEM = {
		"Загрубл. чувств. РЗ",	// название параметра
		GB_COM_DEF_GET_RZ_DEC,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DB,			// размерность
		fcNullBuf,				// массив значений
		2,						// кол-во повторений параметра
		0,						// минимальное значение
		32,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_NUM_DEVS	// зависимость повторений
};

// тип приемника
static const Param fPrmType PROGMEM = {
		"Тип приемника",		// название параметра
		GB_COM_DEF_GET_PRM_TYPE,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPrmType[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		2,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// снижение уровня АК
static const Param fAcInDec PROGMEM = {
		"Снижение уровня АК",	// название параметра
		GB_COM_DEF_GET_PRM_TYPE,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// частота ПРД
static const Param fFreqPrd PROGMEM = {
		"Частота ПРД",			// название параметра
		GB_COM_DEF_GET_FREQ_PRD,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPvzlFreq[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		4,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// частота ПРМ
static const Param fFreqPrm PROGMEM = {
		"Частота ПРМ",			// название параметра
		GB_COM_DEF_GET_RZ_THRESH,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_LIST,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcPvzlFreq[0],			// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		4,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// сдвиг переднего фронта ПРД
static const Param fShiftFront PROGMEM = {
		"Сдвиг пер.фронта ПРД",	// название параметра
		GB_COM_DEF_GET_OVERLAP,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		72,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// сдвиг заднего фронта ПРД относительно сигнала МАН (пуск)
static const Param fShiftBack PROGMEM = {
		"Сдвиг зад.фронта ПРД",	// название параметра
		GB_COM_DEF_GET_OVERLAP,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		72,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		2,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// сдвиг ПРМ
static const Param fShiftPrm PROGMEM = {
		"Сдвиг ПРМ",			// название параметра
		GB_COM_DEF_GET_OVERLAP,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		72,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		3,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// сдвиг ВЧ ПРД от ПУСК
static const Param fShiftPrd PROGMEM = {
		"Сдвиг ВЧ ПРД от ПУСК",	// название параметра
		GB_COM_DEF_GET_OVERLAP,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_DEG,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		72,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8_DOP,		// тип параметра для сохранения новго значения
		4,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};


// время включения (задержка срабатывания дискретного входа)
static const Param fPrdInDelay PROGMEM = {
		"Задержка срабат. ПРД",	// название параметра
		GB_COM_PRD_GET_TIME_ON,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_MSEC,		// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		20,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// длительность команды ВЧ
static const Param fPrdDurationL PROGMEM = {
		"Длительность команды",	// название параметра
		GB_COM_PRD_GET_DURATION,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_MSEC,		// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		30,						// минимальное значение
		100,					// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения						// байт дополнительной информации для сохранения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений						// байт дополнительной информации для сохранения
};

// длительность команды ОПТИКА
static const Param fPrdDurationO PROGMEM = {
		"Длительность команды",	// название параметра
		GB_COM_PRD_GET_DURATION,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_MSEC,		// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		30,						// минимальное значение
		500,					// максимальное значение
		10,						// дискретность
		10,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// тестовая команда
static const Param fPrdTestCom PROGMEM = {
		"Тестовая команда",		// название параметра
		GB_COM_PRD_GET_TEST_COM,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// следящие команды
// TODO повторения зависят от количества текущих команд на передачу
// TODO байт дополнительной информации зависит от количества текущих команд ПРД
static const Param fPrdComLong PROGMEM = {
		"Следящие команды",		// название параметра
		GB_COM_PRD_GET_LONG_COM,// команда стандартного протокола
		Param::PARAM_BITES,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		32,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_BITES,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_COM_PRD	// зависимость повторений
};

// блокированные команды
// TODO повторения зависят от количества текущих команд на передачу
// TODO байт дополнительной информации зависит от количества текущих команд ПРД
static const Param fPrdComBlock PROGMEM = {
		"Блокиров. команды",	// название параметра
		GB_COM_PRD_GET_BLOCK_COM,// команда стандартного протокола
		Param::PARAM_BITES,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		32,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_BITES,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_COM_PRD	// зависимость повторений
};

// трансляция ЦС
static const Param fPrdDrEnable PROGMEM = {
		"Трансляция ЦС",		// название параметра
		GB_COM_PRD_GET_DR_STATE,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// блокированные команды ЦС
// TODO повторения зависят от количества текущих команд на передачу
// TODO байт дополнительной информации зависит от количества текущих команд ПРД
static const Param fPrdDrComBlock PROGMEM = {
		"Блокиров. команды ЦС",	// название параметра
		GB_COM_PRD_GET_DR_BLOCK,// команда стандартного протокола
		Param::PARAM_BITES,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		32,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_BITES,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_COM_PRD	// зависимость повторений
};

// количество команд
static const Param fPrdComNums PROGMEM = {
		"Количество команд",	// название параметра
		GB_COM_PRD_GET_COM,		// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		32,						// максимальное значение
		4,						// дискретность
		4,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// количество команд группы А
// TODO повторения зависят от количества текущих команд на передачу
static const Param fPrdComNumsA PROGMEM = {
		"Количество команд А",	// название параметра
		GB_COM_PRD_GET_COM_A,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		32,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_ON_COM_PRD,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};


// задержка на фиксацию команды (время включения)
static const Param fPrmTimeOn PROGMEM = {
		"Задержка на фикс.ком",	// название параметра
		GB_COM_PRM_GET_TIME_ON,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_MSEC,		// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		5,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// блокированные команды
// TODO повторения зависят от количества текущих команд на приеме
// TODO байт дополнительной информации зависит от количества текущих команд ПРМ
static const Param fPrmComBlock PROGMEM = {
		"Блокиров. команды",	// название параметра
		GB_COM_PRM_GET_BLOCK_COM,// команда стандартного протокола
		Param::PARAM_BITES,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		32,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_BITES,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_COM_PRM	// зависимость повторений
};

// задержка на выключение
// TODO повторения зависят от количества текущих команд на приеме
// TODO байт дополнительной информации зависит от количества текущих команд ПРМ
static const Param fPrmTimeOff PROGMEM = {
		"Задержка на выкл.ком",	// название параметра
		GB_COM_PRM_GET_TIME_OFF,// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_MSEC,		// размерность
		fcNullBuf,				// массив значений
		32,						// кол-во повторений параметра
		0,						// минимальное значение
		1000,					// максимальное значение
		50,						// дискретность
		10,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_COM_PRM	// зависимость повторений
};

// трансляция ЦС
static const Param fPrmDrEnable PROGMEM = {
		"Трансляция ЦС",		// название параметра
		GB_COM_PRM_GET_DR_STATE,// команда стандартного протокола
		Param::PARAM_LIST,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		1,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// блокированные команды ЦС
// TODO повторения зависят от количества текущих команд на передачу
// TODO байт дополнительной информации зависит от количества текущих команд ПРМ
static const Param fPrmDrComBlock PROGMEM = {
		"Блокиров. команды ЦС",	// название параметра
		GB_COM_PRM_GET_DR_BLOCK,// команда стандартного протокола
		Param::PARAM_BITES,		// тип параметра
		Param::RANGE_ON_OFF,	// диапазон измнения
		Param::DIM_NO,			// размерность
		fcOnOff[0],				// массив значений
		32,						// кол-во повторений параметра
		0,						// минимальное значение
		1,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_BITES,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_COM_PRM	// зависимость повторений
};

// команда ВЧ в ЦС
// TODO повторения зависят от количества текущих команд на передачу
// TODO байт дополнительной информации зависит от количетсва текущих команд ПРМ
static const Param fPrmDrComToHf PROGMEM = {
		"Команда ВЧ в ЦС",		// название параметра
		GB_COM_PRM_GET_DR_COM,	// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		32,						// кол-во повторений параметра
		1,						// минимальное значение
		32,						// максимальное значение
		1,						// дискретность
		1,						// множитель для стандартного протокола
		GB_SEND_DOP_INT8,		// тип параметра для сохранения новго значения
		0,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_ON_COM_PRM	// зависимость повторений
};

// количество команд
static const Param fPrmComNums PROGMEM = {
		"Количество команд",	// название параметра
		GB_COM_PRM_GET_COM,		// команда стандартного протокола
		Param::PARAM_INT,		// тип параметра
		Param::RANGE_INT,		// диапазон измнения
		Param::DIM_NO,			// размерность
		fcNullBuf,				// массив значений
		1,						// кол-во повторений параметра
		4,						// минимальное ыыыыыыызначение
		32,						// максимальное значение
		4,						// дискретность
		4,						// множитель для стандартного протокола
		GB_SEND_INT8,			// тип параметра для сохранения новго значения
		1,						// байт дополнительной информации для сохранения
		Param::DEPEND_MAX_NO,	// заивимость максимума
		Param::DEPEND_SAME_NO	// зависимость повторений
};

// Массив параметров (связан с eGB_PARAM)
static const Param* fParams[] PROGMEM  = {
		&fNullParam,
		// Общие параметры
		&fTimeSynch,
		&fNumOfDevice,
		&fOutCheck,
		&fWarnThd,
		&fWarnThdCf,
		&fTimeRerun,
		&fComPrdKeep,
		&fComPrmKeep,
		&fInDec,
		&fNetAddress,
		&fUOutNom,
		&fFreq,
		&fCompP400,
		&fInDecAcAnswer,
		&fDetector,
		&fCorU,
		&fCorI,
		&fPvzueProtocol,
		&fPvzueParity,
		&fPvzueFail,
		&fPvzueNoiseThd,
		&fPvzueNoiseLvl,
		&fPvzueAcType,
		&fPvzueAcPeriod,
		&fPvzueAcPerRe,
		&fBackup,
		&fCompK400,
		&fNumOfDevices,
		&fTmK400,
		// Параметры защиты
		&fDefType,
		&fTimeNoMan,
		&fOverlap,
		&fOverlapP400,
		&fDelay,
		&fWarnThdRz,
		&fSensDec,
		&fSensDecRz,
		&fPrmType,
		&fAcInDec,
		&fFreqPrd,
		&fFreqPrm,
		&fShiftFront,
		&fShiftBack,
		&fShiftPrm,
		&fShiftPrd,
		// Параметры передатчика
		&fPrdInDelay,
		&fPrdDurationL,
		&fPrdDurationO,
		&fPrdTestCom,
		&fPrdComLong,
		&fPrdComBlock,
		&fPrdDrEnable,
		&fPrdDrComBlock,
		&fPrdComNums,
		&fPrdComNumsA,
		// Параметры приемника
		&fPrmTimeOn,
		&fPrmComBlock,
		&fPrmTimeOff,
		&fPrmDrEnable,
		&fPrmDrComBlock,
		&fPrmDrComToHf,
		&fPrmComNums,
		// Параметры интерфейса

};

#endif /* FLASHPARAMS_H_ */
